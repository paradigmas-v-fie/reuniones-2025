"""
Patr√≥n Factory Method
Descripci√≥n: Creaci√≥n de objetos sin especificar la clase exacta
"""

from abc import ABC, abstractmethod

# Clase abstracta base para veh√≠culos
class Vehiculo(ABC):

    @abstractmethod
    def acelerar(self):
        pass

# Implementaciones concretas de veh√≠culos
class Auto(Vehiculo):

    def acelerar(self):
        return "Auto acelerando üöó"

class Moto(Vehiculo):

    def acelerar(self):
        return "Moto acelerando üèçÔ∏è"

# Factory para crear veh√≠culos
class FabricaVehiculos:

    @staticmethod
    def crear_vehiculo(tipo):
        vehiculos = {
            "auto": Auto,
            "moto": Moto
        }

        clase_vehiculo = vehiculos.get(tipo)
        if clase_vehiculo:
            return clase_vehiculo()
        raise ValueError(f"Tipo de veh√≠culo '{tipo}' no v√°lido")

# Ejemplo de uso
if __name__ == "__main__":
    vehiculo = FabricaVehiculos.crear_vehiculo("auto")
    print(vehiculo.acelerar())  # Output: Auto acelerando üöó

    vehiculo = FabricaVehiculos.crear_vehiculo("moto")
    print(vehiculo.acelerar())  # Output: Moto acelerando üèçÔ∏è
